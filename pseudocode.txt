Main
Main Initiate
	Init game
	Init player
	Init display
	Init paddle
	Init ball function
	Init demo function


Main Update
	Update game function
	Update display function

	If game state = play, then
		Update ball function
		Update bricks function
		Update paddle function

	If game state = title, then
		Update demo function
	

Main Draw
	Clear screen

	If game state = play, then
		Draw paddle function
		Draw bricks function
		Draw ball function
		Draw walls function
		Draw notifications function
		Draw lives function

	If game state = title, then
		Draw demo function



Game
Initiate Game
	Game object
		State = TITLE
			LOAD (level)
			PLAY
			NEXT
			WIN
			LOSE
		
		Level = 0
		Ticks = 0

Update Game
	If game state = LOAD
		If display type = NONE, then
			If game level is 0, then
				Game state = TITLE
			Elseif game level is 1-3, then
				Game state = PLAY
			Elseif game level is 4, then
				Game state = WIN
				Display type = WIN
				

	Elseif game state = TITLE, then
		If display type = NONE, then
		If x is just pressed, then
			Game state = LOAD (level 1)

	
	Elseif game state = PLAY, then
		If bricks remaining = 0, then
			Game state = NEXT
			Display type = NEXT
		If player lives = 0, then
			If player continues > 0, then
				Reset ball
			Else
				Game state = LOSE
				Display type= LOSE

	Elseif game state = NEXT, then
		If display type = NONE, then
			Game state = LOAD (game level + 1)
			

	Elseif game state = LOSE, then
If display type = NONE, then
	Print try again?
	If x is just pressed,
Game state = LOAD (level 0)

Player
Initiate Player
	Player object
		Difficulty = easy
		Lives = 3
		Continues = 3
		Playtime = 0

Update Player
	If game state is not TITLE, then
		Playtime += 0

Display

Initiate Display
	Display object
		Type = NONE
			TITLE
			LOAD
			NEXT
			WIN
LOSE
		Timer = 0

	Timer object
		Title = 100
		Load = 100
		Next = 200
		Win = 100
		Lose = 300


Update Display
	If display type = NONE, then

		If game state = TITLE, then
			Display type = TITLE
			Display timer = timer, TITLE
		Elseif game state = LOAD, then
			Display type = LOAD
			Display timer = timer, LOAD
		Elseif game state = NEXT, then
			Display type = NEXT
			Display timer = timer, NEXT
		Elseif game state = LOSE, then
			Display type = LOSE
			Display timer = timer, LOSE
		Elseif game state = WIN, then
			Display type = WIN
			Display timer = timer, WIN
		
Else
		If display timer = 0, then
			Display type = NONE
	
Draw Display

â†’ Things happen here

Paddle

Initiate Paddle
	Paddle object
		Active = False
		Color = 7
		Speed = 2
		X = 63
		Y = 115
		Width = 9


Update Paddle

If paddle is active, then

If right arrow pressed, then
Paddle x += paddle speed
 	
 		if paddle x + paddle width > 127 - level walls
 			Paddle x = 127 - paddle w - level walls

If left arrow pressed, then
 		Paddle x -= paddle speed
 	
 	If paddle x - paddle width > game.walls, then
		Paddle x = paddle width + game walls
 

Draw Paddle

	Draw a line from 
(paddle x - paddle width, paddle y) to
(paddle x + width, paddle y)
Using paddle color


Ball
Initiate Ball
	
Ball object
		State = STOP
	Color = 7
	Speed = 1
	R = 2
	X = 63
	Y = 80
	Delta x = 1
	Delta y = 1
	Direction 
X = 1
Y =1
		
Reset Ball
	
	Ball x = 63
Ball y = 80
	Ball state = STOP

Update Ball

	If ball state = STOP, then
		If X button was just pressed, then
			Ball state = GO
		Else
			Return
	
	If ball x + ball r >= 127 -  level walls OR ball x - ball r <= level walls, then
		Ball direction 1 *= -1 
		Play wall bounce SFX
	
	If ball y + ball r <= 0, then
		Ball direction 2 *= 0
		Play ceiling bounce SFX
	
	If ball y - ball r >= 127, then
		Player lives -= 1
		Level walls += 1
		Play ball drop SFX
		Reset ball function
	
	
	
	If ball collides with paddle, then
		Ball direction y *= 1
		Play paddle bounce SFX
	
	For list of bricks:
		If ball collides with brick, then
			Ball direction x or y *= 1
			Play brick break SFX
	
	Ball x += ball speed * ball direction x
	Ball y += ball speed * ball direction y



Draw Ball
Fill circle(ball x, ball y, ball r, ball color)

Ball Collides
Arguments - (box x, box y, box width, box h)

If ball left edge > box x + box width, then
	Return FALSE
If ball right edge < box x - box width, then
	Return FALSE
If ball bottom edge > box y + box height, then
	Return FALSE
If ball top edge < box y - box height, then
	Return FALSE

Return TRUE
Bricks
Initiate Brick

	Brick_spawn object
		Rows
		Bpr (bricks per row)
		X
		Y
		Margin

	Brick object
		Color
		X
		Y
		Width
		Height
		Max width
		Max height

	Bricks object
	
Initiate Bricks
	Remaining bricks = brick_spawn rows * brick_spawn bpr
	
	Brick x = brick_spawn x
Brick y = brick_spawn y

	For length of brick_spawn rows, do this:
		Bricks[i] table

		For length of brick_spawn bpr, do this:
			Bricks[i][j] table
			Bricks[i][j] color = brick color
			Bricks[i][j] x = brick x 
			Bricks[i][j] y = brick y
			Bricks[i][j] w = brick w
			Bricks[i][j] h = brick h
			
			Brick x += (brick width * 2) + brick_spawn margin
			
		Brick x = brick_spawn x
		Brick y = (brick height * 2) + brick_spawn margin
		Brick color += 1
		
Update Bricks
	If ball state = STOP, then
		RETURN

	If button pressed = FALSE, then
		RETURN

	
	Local row = ceiling(random number(length of bricks))
	Local column = ceiling(random number(length of bricks[row]))
	Local effect = random{MOVE, GROW, SHRINK}
	
	If effect = MOVE, then
		Bricks[row][column] x += ball delta x
		Bricks[row][column] y += ball delta x

		Bricks[row][column] x = mid(level walls, Bricks[row][column] x, 127 - level walls)
		Bricks[row][column] y = mid(0, Bricks[row][column] x, 127)
		RETURN
	
	Local change = random{x,y}

	If effect = GROW, then
		Bricks[row][column][change] += level change_rate

		Bricks[row][column] x = mid(level walls + Bricks[row][column] width,
Bricks[row][column] x,
127 - level walls - Bricks[row][column] width)
		Bricks[row][column] y = mid(Bricks[row][column] width,
Bricks[row][column] y,
127 - Bricks[row][column] width)

		
		RETURN

	If effect = SHRINK, then
		Bricks[row][column][change] -= level change_rate
		RETURN

Draw Bricks
	For length of bricks, do this:
		For length of rows of bricks, do this:
			Local c0 = bricks[i][j] x - bricks[i][j] width
			Local c1 = bricks[i][j] y - bricks[i][j] height
			Local c2 = bricks[i][j] x + bricks[i][j] width
			Local c3 = bricks[i][j] y + bricks[i][j] height
			Draw a rectangle from (c0, c1) to (c2, c3)

Hit Bricks
	For each row in bricks, do this:
		For each brick in the row, do this:
			If ball collides with brick, then
				Remove brick from bricks table
				Remaining bricks -= 1
				Play brick break SFX
				RETURN


Levels

Initiate Level
Level object = Walls
			Timer
			Change_rate


	If game level = 0, then

		Player lives = 5
		Paddle width = 9

		Brick_spawn rows = 1
		Brick_spawn bpr = 1 
		Brick_spawn x = 22
		Brick_spawn y = 12 
		Brick_spawn margin = 3
		
		Brick color = 9
		Brick width = 15
		Brick height = 15
		Brick min width= 15
		Brick min height = 15
		

	Elseif game level = 1, then

		Player lives = 5
		Paddle width = 9

		Brick_spawn rows = 5
		Brick_spawn bpr = 7
		Brick_spawn x = 22
		Brick_spawn y = 12 
		Brick_spawn margin = 3
		
		Brick color = 9
		Brick width = 5
		Brick height = 3
		Brick min width= 5
		Brick min height = 3

	Elseif game level = 2, then

		Player lives += 2
		Paddle width -= 1

		Brick_spawn rows = 6
		Brick_spawn bpr = 9
		Brick_spawn x = 19
		Brick_spawn y = 12 
		Brick_spawn margin = 2
		
		Brick color = 9
		Brick width = 4
		Brick height = 2
		Brick min width= 3
		Brick min height = 2

	Elseif game level = 3, then

		Player lives += 2
		Paddle width -= 1

		Brick_spawn rows = 8
		Brick_spawn bpr = 11
		Brick_spawn x = 8
		Brick_spawn y = 12 
		Brick_spawn margin = 2
		
		Brick color = 9
		Brick width = 3
		Brick height = 1
		Brick min width= 1
		Brick min height = 1

	Initiate bricks
	Reset ball
